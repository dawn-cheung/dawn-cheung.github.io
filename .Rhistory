speed_dataset <- read.csv("worldwideInternetSpeed.csv") #ISO2 code used in dataset!
price_dataset <- read.csv("worldwideMobileDataPricing2019to2023.csv") #ISO2 code used in dataset!
price_dataset$values <- gsub('[$,]', '', price_dataset$values)
#CHANGING METHOD: left_join() access, price and speed datasets with world map datasets, THEN filter by year
#this is inline with preprocessing, a data optmising technique, to "make the data ready for use beforehand"
sostupid_map <- left_join(world_map, access_dataset, by = "region")
world_map$region <- countrycode(world_map$region, "iso3c", "iso2c") #RESET ISO CODES
isocode <- "iso2c"
sohungry_map <- left_join(world_map, speed_dataset, by = "region")
sotired_map <- left_join(world_map, price_dataset, by = "region")
accessyear <- sostupid_map %>% filter(Dyear == "D2020")
speedyear <- speed_dataset %>% filter(Dyear == "D2020")
priceyear <- sotired_map %>% filter(Dyear == "D2020")
#group = group connects the points in the correct order
mapplotting <- function(wee, dayear, colourscheme) {
if(identical(wee, access_dataset)) {
if (isocode == "iso2c") { #its a global variable so its fine
world_map$region <- countrycode(world_map$region, "iso2c", "iso3c")
isocode == "iso3c"
}
} else {
if (isocode == "iso3c") {
world_map$region <- countrycode(world_map$region, "iso3c", "iso2c")
isocode == "iso2c"
}
}
weep <- wee %>% filter(Dyear == paste0("D", dayear))
weep$values <- as.numeric(weep$values)
mapdataset <- left_join(world_map, weep, by = "region")
ggplot(mapdataset, aes(long, lat, group = group)) +
geom_polygon(aes(fill = values), color = "white", size = 0.03) +
scale_fill_viridis_c(option = colourscheme) +
theme(plot.margin = margin(0, 0, 0, 0, "cm"))
}
mapplotting(access_dataset, 2019, "B")
mapplotting(speed_dataset, 2019,"C")
mapplotting(price_dataset, 2019,"C")
econineq <- read.csv("EconomicInequality.csv")
gdpPERCAPITA <- read.csv("gdpPERCAPITA.csv") %>% rename(year = Year) #ISO3 used!
desidata <- read.csv("desi-data.csv") #ISO2 used!
GINIvaluesyearc3 <- econineq %>%
filter(year == 2020) %>%
#select(gini, c3) %>%
rename(region = c3)
GINIvaluesyearc2 <- econineq %>%
filter(year == 2020) %>%
#select(gini, c3) %>%
rename(region = c2)
desi <- desidata %>%
filter(period == "desi_2020") %>%
#select(gini, c2) %>%
rename(region = country)
gdpPERCAPITA <- gdpPERCAPITA %>%
filter(year == 2020) %>%
#select(gini, c3) %>%
rename(region = Code)
accessscatter <- left_join(GINIvaluesyearc3, accessyear, by = "region") %>%
left_join(. , gdpPERCAPITA, by = "region")
accessscatter %>%
drop_na(values) %>%
ggplot(data = accessscatter, mapping = aes(x = values, y = log(gdp), colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
accessscatter %>%
drop_na(values) %>%
ggplot(data = accessscatter, mapping = aes(x = log(values), y = gdp, colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
gdpPERCAPITA$region <- countrycode(gdpPERCAPITA$region, "iso3c", "iso2c") #converting ISO3 to ISO2
speedscatter <- left_join(GINIvaluesyearc2, speedyear, by = "region") %>%
left_join(. , gdpPERCAPITA, by = "region")
options(repr.plot.width = 10, repr.plot.height =3)
speedscatter %>%
drop_na(values) %>%
ggplot(data = speedscatter, mapping = aes(x = GDP.per.capita, y = as.numeric(values), colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
speedscatter %>%
drop_na(values) %>%
ggplot(data = speedscatter, mapping = aes(x = gini, y = as.numeric(values), colour = region_wb)) +
geom_point()
pricescatter <- left_join(GINIvaluesyearc2, priceyear, by = "region") %>%
left_join(. , gdpPERCAPITA, by = "region")
pricescatter %>%
drop_na(values) %>%
ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = GDP.per.capita, colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
pricescatter %>%
drop_na(values) %>%
ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = gdp, colour = region_wb)) +
geom_point() + geom_smooth(method="lm", col="black")
accessyear$region <- countrycode(accessyear$region, "iso3c", "iso2c")
accessyear %>% rename(accessyear_values = values)
priceyear %>% rename(priceyear_values = values) #i keep so much just to laugh at the EU
priceaccessscatter <- left_join(accessyear, priceyear, by = "region")
#remove all non-pg13 commenst when setting echo to true
library(tidyverse)
library(ggplot2)
library(maps)
library(sf)
library(dplyr)
library(countrycode)
library(shiny)
library(ggpubr)
library(rsconnect)
#Shiny app:
#https://myshinyappplease.shinyapps.io/MyShinyApp/
#SOURCES:
#accesstointernet.csv: https://data.worldbank.org/indicator/IT.NET.USER.ZS?end=2022&start=2009&view=chart [Individuals using the Internet (% of population)]
#https://www.statista.com/statistics/262966/number-of-internet-users-in-selected-countries/ + https://www.worldometers.info/world-population/japan-population/ [to estimate Individuals using the Internet (% of population) in 2022 where there was insufficient data in the earlier datatset]
# Import the data with coordinates
world_map <- map_data("world")
world_map$region <- countrycode(world_map$region, "country.name", "iso3c")
isocode <- c("iso3") #keeps track of what iso code we're on and im so sorry i couldnt be bothered to figure out how to tag it onto word_map itself
access_dataset <- read.csv("accesstointernet.csv")
speed_dataset <- read.csv("worldwideInternetSpeed.csv") #ISO2 code used in dataset!
price_dataset <- read.csv("worldwideMobileDataPricing2019to2023.csv") #ISO2 code used in dataset!
price_dataset$values <- gsub('[$,]', '', price_dataset$values)
#CHANGING METHOD: left_join() access, price and speed datasets with world map datasets, THEN filter by year
#this is inline with preprocessing, a data optmising technique, to "make the data ready for use beforehand"
#sostupid_map <- left_join(world_map, access_dataset, by = "region")
#world_map$region <- countrycode(world_map$region, "iso3c", "iso2c") #RESET ISO CODES
#isocode <- "iso2c"
#sohungry_map <- left_join(world_map, speed_dataset, by = "region")
#sotired_map <- left_join(world_map, price_dataset, by = "region")
mappreprocessing <- function(wee) {
if(identical(wee, access_dataset)) {
if (isocode == "iso2c") { #its a global variable so its fine
world_map$region <- countrycode(world_map$region, "iso2c", "iso3c")
isocode == "iso3c"
}
} else {
if (isocode == "iso3c") {
world_map$region <- countrycode(world_map$region, "iso3c", "iso2c")
isocode == "iso2c"
}
}
wee$values <- as.numeric(wee$values)
mapdataset <- left_join(world_map, wee, by = "region")
#write.csv(mapdataset, ".\accesstointernet.csv", row.names = FALSE)
return(mapdataset)}
mappreprocessing(access_dataset)
mappreprocessing(price_dataset)
mappreprocessing(speed_dataset)
#group = group connects the points in the correct order
mapplotting <- function(wee, dayear, colourscheme) {
if(identical(wee, access_dataset)) {
if (isocode == "iso2c") { #its a global variable so its fine
world_map$region <- countrycode(world_map$region, "iso2c", "iso3c")
isocode == "iso3c"
}
} else {
if (isocode == "iso3c") {
world_map$region <- countrycode(world_map$region, "iso3c", "iso2c")
isocode == "iso2c"
}
}
weep <- wee %>% filter(Dyear == paste0("D", dayear))
weep$values <- as.numeric(weep$values)
mapdataset <- left_join(world_map, weep, by = "region")
ggplot(mapdataset, aes(long, lat, group = group)) +
geom_polygon(aes(fill = values), color = "white", size = 0.03) +
scale_fill_viridis_c(option = colourscheme) +
theme(plot.margin = margin(0, 0, 0, 0, "cm"))
}
#mapplotting(access_dataset, 2019, "B")
#mapplotting(speed_dataset, 2019,"C")
#mapplotting(price_dataset, 2019,"C")
accessyear <- sostupid_map %>% filter(Dyear == "D2020")
speedyear <- speed_dataset %>% filter(Dyear == "D2020")
priceyear <- sotired_map %>% filter(Dyear == "D2020")
econineq <- read.csv("EconomicInequality.csv")
gdpPERCAPITA <- read.csv("gdpPERCAPITA.csv") %>% rename(year = Year) #ISO3 used!
desidata <- read.csv("desi-data.csv") #ISO2 used!
GINIvaluesyearc3 <- econineq %>%
filter(year == 2020) %>%
#select(gini, c3) %>%
rename(region = c3)
GINIvaluesyearc2 <- econineq %>%
filter(year == 2020) %>%
#select(gini, c3) %>%
rename(region = c2)
desi <- desidata %>%
filter(period == "desi_2020") %>%
#select(gini, c2) %>%
rename(region = country)
gdpPERCAPITA <- gdpPERCAPITA %>%
filter(year == 2020) %>%
#select(gini, c3) %>%
rename(region = Code)
accessscatter <- left_join(GINIvaluesyearc3, accessyear, by = "region") %>%
left_join(. , gdpPERCAPITA, by = "region")
accessscatter %>%
drop_na(values) %>%
ggplot(data = accessscatter, mapping = aes(x = values, y = log(gdp), colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
accessscatter %>%
drop_na(values) %>%
ggplot(data = accessscatter, mapping = aes(x = log(values), y = gdp, colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
gdpPERCAPITA$region <- countrycode(gdpPERCAPITA$region, "iso3c", "iso2c") #converting ISO3 to ISO2
speedscatter <- left_join(GINIvaluesyearc2, speedyear, by = "region") %>%
left_join(. , gdpPERCAPITA, by = "region")
options(repr.plot.width = 10, repr.plot.height =3)
speedscatter %>%
drop_na(values) %>%
ggplot(data = speedscatter, mapping = aes(x = GDP.per.capita, y = as.numeric(values), colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
speedscatter %>%
drop_na(values) %>%
ggplot(data = speedscatter, mapping = aes(x = gini, y = as.numeric(values), colour = region_wb)) +
geom_point()
pricescatter <- left_join(GINIvaluesyearc2, priceyear, by = "region") %>%
left_join(. , gdpPERCAPITA, by = "region")
pricescatter %>%
drop_na(values) %>%
ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = GDP.per.capita, colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
pricescatter %>%
drop_na(values) %>%
ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = gdp, colour = region_wb)) +
geom_point() + geom_smooth(method="lm", col="black")
accessyear$region <- countrycode(accessyear$region, "iso3c", "iso2c")
accessyear %>% rename(accessyear_values = values)
priceyear %>% rename(priceyear_values = values) #i keep so much just to laugh at the EU
priceaccessscatter <- left_join(accessyear, priceyear, by = "region")
library(tidyverse)
library(ggplot2)
library(maps)
library(sf)
library(dplyr)
library(countrycode)
library(shiny)
library(ggpubr)
library(rsconnect)
library(plotly)
library(forcats)
#HARDCODE ALL DATASETS INTO ISO3: DONE
# Import the data with coordinates
world_map <- map_data("world")
world_map$region <- countrycode(world_map$region, "country.name", "iso3c")
access_dataset <- read.csv("accesstointernet.csv")
speed_dataset <- read.csv("worldwideInternetSpeed.csv")
price_dataset <- read.csv("worldwideMobileDataPricing2019to2023.csv")
#filter by year
accessyear <- access_dataset %>% filter(Dyear == "D2020")
speedyear <- speed_dataset %>% filter(Dyear == "D2020")
priceyear <- price_dataset %>% filter(Dyear == "D2020")
econineq <- read.csv("EconomicInequality.csv") #ISO3 used
desidata <- read.csv("desi-data.csv") #ISO3 used!
gdpPERCAPITA <- read.csv("gdpPERCAPITA.csv")
econindicator <- econineq %>%
filter(year == 2020) #%>% #MY PROPOSED SOLUTION: use gini ONLY FOR COLOURATION. do NOT use gini values for xy values
#filter(scale == "Equivalized")
gdpPERCAPITA <- gdpPERCAPITA %>% filter(year == 2020)
econindicator$gini <- as.numeric(econindicator$gini)
gdpPERCAPITA$GDP.per.capita <- as.numeric(gdpPERCAPITA$GDP.per.capita)
speedyear$values <- as.numeric(speedyear$values)
priceyear$values <- as.numeric(priceyear$values)
accessscatter <- left_join(econindicator, accessyear, by = "region")  %>%
left_join(. , gdpPERCAPITA, by = "region")
accessscatter %>%  #KEEPING
drop_na(values) %>%
ggplot(data = accessscatter, mapping = aes(x = values, y = log(GDP.per.capita), colour = gini)) +
geom_point() +
labs(x = "Percentage of the population accessing the Internet (%)", y = "logarithm of GDP per capita", title = "How access to the internet affects economic output") +
geom_smooth(method="lm", col="black")  +
theme(plot.title=element_text(size=30))
accessyear <- accessyear %>% rename(percent_access = values)
priceyear <- priceyear %>% rename(price = values)
speedyear <- speedyear %>% rename(speedyear_values = values)
priceaccessscatter <- left_join(accessyear, priceyear, by = "region") %>%
left_join(. , econindicator, by = "region") %>%
drop_na(percent_access, price)
fit <- lm(percent_access ~ price, data = priceaccessscatter)
distinct_CR = c("ASIA (EX. NEAR EAST)", "BALTICS", "CARIBBEAN", "CENTRAL AMERICA", "CIS(FORMER USSR)", "EASTERN EUROPE", "NEAR EAST", "NORTHERN AFRICA", "NORTHEN AMERICA", "OCEANIA", "SOUTH AMERICA", "SUB-SAHARAN AFRICA", "WESTERN EUROPE")
diff_data = c()
#data.frame(percent_access = c(), price= c(), Continental.region= c())
for (q in 1:length(distinct_CR)) {
diff_data[[q]] = priceaccessscatter[which(priceaccessscatter$Continental.region == distinct_CR[q]), c("percent_access", "price", "Continental.region")]
}
#palicating plotly's bs
x_range <- seq(min(priceaccessscatter$price), max(priceaccessscatter$price), length.out = 150)
x_range <- matrix(x_range, nrow=150, ncol=1)
xdf <- data.frame(x_range)
colnames(xdf) = c("price")
ydf = data.frame(predict(fit, newdata = xdf))
colnames(ydf) <- c("percent_access")
xy = data.frame(xdf, ydf)
graphly = plot_ly(data = priceaccessscatter,
x = ~price,
y = ~percent_access,
text = ~paste("Price: USD$", price, '<br>% Access:', round(percent_access,3)),
colors = "Set1")
for (i in 1:length(distinct_CR)) {
graphly = graphly %>%
add_trace(data = diff_data[[i]], x = ~price, y = ~percent_access, type = 'scatter', name = distinct_CR[[i]], mode = 'markers', alpha = 0.65, marker = list(size = 14))
}
t1 <- list(
family = "Arial",
size = 24.5,
color = "darkblue")
graphly = graphly %>%
add_lines(data = xy, x = ~price, y = ~percent_access, name = '<b> Regression Line</b> ', mode = 'lines', alpha = 1) %>%
layout(title = list(text = "How price of internet affects access to the internet", font = t1, y = 0.99),
xaxis = list(title = 'Price of Internet (USD$)'),
yaxis = list(title = 'Percentage of the population accessing the Internet (%)'),
legend = list(title=list(text='<b> Continental Region </b>')))
graphly
# labs(x = "Price of Internet (USD$)",
#       y = "Percentage of the population accessing the Internet (%)",
#      title = "How price of internet affects access to the internet",
#      colour = "Continental Region")
accessyear <- accessyear %>% rename(values = percent_access)
priceyear <- priceyear %>% rename(values = price)
speedyear <- speedyear %>% rename(values = speedyear_values)
AgreeDisagreePie <- function(percent, my_title, title_size, title_wrap) {
percent = as.numeric(percent)
data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
ggplot(data, aes(x="", y=amount, fill=category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y") +
labs(title = str_wrap(my_title, title_wrap)) +
geom_text(aes(label = paste0(amount, "%")), position = position_stack(vjust = 0.5), size = 8.2) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = title_size),
plot.margin = margin(0, 1, 0, 1, "cm"))
}
ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right", 16, 40),
AgreeDisagreePie(60.1, "I use the internet to find information (#1 Most popular use case globally)", 16, 40),
ncol = 2, nrow = 1,
common.legend = TRUE, legend = "bottom",
align = "hv")
AgreeDisagreePie <- function(percent, my_title, title_size, title_wrap) {
percent = as.numeric(percent)
data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
ggplot(data, aes(x="", y=amount, fill=category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y") +
labs(title = str_wrap(my_title, title_wrap)) +
geom_text(aes(label = paste0(amount, "%")), position = position_stack(vjust = 0.5), size = 8.2) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, vjust = -1, size = title_size),
plot.margin = margin(0, 1, 0, 1, "cm"))
}
ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right", 16, 40),
AgreeDisagreePie(60.1, "I use the internet to find information (#1 Most popular use case globally)", 16, 40),
ncol = 2, nrow = 1,
common.legend = TRUE, legend = "bottom",
align = "hv")
AgreeDisagreePie <- function(percent, my_title, title_size, title_wrap) {
percent = as.numeric(percent)
data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
ggplot(data, aes(x="", y=amount, fill=category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y") +
labs(title = str_wrap(my_title, title_wrap)) +
geom_text(aes(label = paste0(amount, "%")), position = position_stack(vjust = 0.5), size = 8.2) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = title_size),
plot.margin = margin(0, 1, 0, 1, "cm"))
}
ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right", 16, 40),
AgreeDisagreePie(60.1, "I use the internet to find information (#1 Most popular use case globally)", 16, 40),
ncol = 2, nrow = 1,
common.legend = TRUE, legend = "bottom",
align = "hv")
AgreeDisagreePie <- function(percent, my_title, title_size, title_wrap) {
percent = as.numeric(percent)
data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
ggplot(data, aes(x="", y=amount, fill=category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y") +
labs(title = str_wrap(my_title, title_wrap)) +
geom_text(aes(label = paste0(amount, "%")), position = position_stack(vjust = 0.5), size = 8.2) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, vjust = -1, size = title_size),
plot.margin = margin(0, 1, 0, 1, "cm"))
}
ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right", 16, 40),
AgreeDisagreePie(60.1, "I use the internet to find information (#1 Most popular use case globally)", 16, 40),
ncol = 2, nrow = 1,
common.legend = TRUE, legend = "bottom",
align = "hv")
AgreeDisagreePie <- function(percent, my_title, title_size, title_wrap) {
percent = as.numeric(percent)
data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
ggplot(data, aes(x="", y=amount, fill=category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y") +
labs(title = str_wrap(my_title, title_wrap)) +
geom_text(aes(label = paste0(amount, "%")), position = position_stack(vjust = 0.5), size = 8.2) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, vjust = -1, size = title_size),
plot.margin = margin(0, 1, 0, 1, "cm"))
}
ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right", 18, 40),
AgreeDisagreePie(60.1, "I use the internet to find information (#1 Most popular use case globally)", 18, 40),
ncol = 2, nrow = 1,
common.legend = TRUE, legend = "bottom",
align = "hv")
AgreeDisagreePie(66, "The internet has improved life in my country", 31, 9, 0)
AgreeDisagreePie <- function(percent, my_title, title_size, title_wrap, vee_hee) {
percent = as.numeric(percent)
data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
ggplot(data, aes(x="", y=amount, fill=category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y") +
labs(title = str_wrap(my_title, title_wrap)) +
geom_text(aes(label = paste0(amount, "%")), position = position_stack(vjust = 0.5), size = 8.2) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, vjust = vee_hee, size = title_size),
plot.margin = margin(0, 1, 0, 1, "cm"))
}
ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right", 18, 40, -1),
AgreeDisagreePie(60.1, "I use the internet to find information (#1 Most popular use case globally)", 18, 40, -0.1),
ncol = 2, nrow = 1,
common.legend = TRUE, legend = "bottom",
align = "hv")
AgreeDisagreePie(66, "The internet has improved life in my country", 31, 9, 0)
AgreeDisagreePie(66, "The internet has improved life in my country", 31, 9)
AgreeDisagreePie <- function(percent, my_title, title_size, title_wrap, vee_hee = -1) {
percent = as.numeric(percent)
data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
ggplot(data, aes(x="", y=amount, fill=category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y") +
labs(title = str_wrap(my_title, title_wrap)) +
geom_text(aes(label = paste0(amount, "%")), position = position_stack(vjust = 0.5), size = 8.2) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, vjust = vee_hee, size = title_size),
plot.margin = margin(0, 1, 0, 1, "cm"))
}
ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right", 18, 40, -1),
AgreeDisagreePie(60.1, "I use the internet to find information (#1 Most popular use case globally)", 18, 40, -0.1),
ncol = 2, nrow = 1,
common.legend = TRUE, legend = "bottom",
align = "hv")
AgreeDisagreePie(66, "The internet has improved life in my country", 31, 9)
AgreeDisagreePie(40, "The internet has improved life in my country", 31, 9)
AgreeDisagreePie(66, "The internet has improved life in my country", 20, 9)
AgreeDisagreePie(66, "The internet has improved life in my country", 20, 9, -0.4)
AgreeDisagreePie(66, "The internet has improved life in my country", 10, 9, -0.4)
AgreeDisagreePie(66, "The internet has improved life in my country", 31, 90, -0.2)
AgreeDisagreePie <- function(percent, my_title, title_size, title_wrap, vee_hee = -1) {
percent = as.numeric(percent)
data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
ggplot(data, aes(x="", y=amount, fill=category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y") +
labs(title = str_wrap(my_title, title_wrap)) +
geom_text(aes(label = paste0(amount, "%")), position = position_stack(vjust = 0.5), size = 8.2) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, vjust = vee_hee, size = title_size),
plot.margin = margin(0, 1, 0, 1, "cm"))
}
ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right", 18, 40, -1),
AgreeDisagreePie(60.1, "I use the internet to find information (#1 Most popular use case globally)", 18, 40, -0.1),
ncol = 2, nrow = 1,
common.legend = TRUE, legend = "bottom",
align = "hv")
AgreeDisagreePie(66, "The internet has improved life in my country", 31, 50, -0.2)
AgreeDisagreePie(66, " The internet has improved life in my country", 32, 50, -0.2)
AgreeDisagreePie(66, "   The internet has improved life in my country", 32, 50, -0.5)
install.packages("jpeg")
install.packages("png")
#remove this or ur gonna get hacked lol
#Account Email: dawnc.sols@gmail.com
#Account ID: 37fe2910-d9ad-438e-a597-1581a1b2a40b
library(httr)
library(jsonlite)
library(rjson)
library(jpeg)
library(png)
myAPI = "m47ay41Ny3UV6MfKyz0E7M4PJfRIOpvhR40fksAu"
current_date = Sys.Date()
#hepl https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY&date=2014-10-01&concept_tags=True
newurl = paste0("https://api.nasa.gov/planetary/apod?api_key=", myAPI, "&date=", current_date)
res = GET(newurl)
result <- fromJSON(rawToChar(res$content))
attach(result)
imagey = readJPEG(getURLContent(hdurl))
#remove this or ur gonna get hacked lol
#Account Email: dawnc.sols@gmail.com
#Account ID: 37fe2910-d9ad-438e-a597-1581a1b2a40b
library(httr)
library(jsonlite)
library(rjson)
library(jpeg)
library(png)
myAPI = "m47ay41Ny3UV6MfKyz0E7M4PJfRIOpvhR40fksAu"
current_date = Sys.Date()
#hepl https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY&date=2014-10-01&concept_tags=True
newurl = paste0("https://api.nasa.gov/planetary/apod?api_key=", myAPI, "&date=", current_date)
res = GET(newurl)
result <- fromJSON(rawToChar(res$content))
attach(result)
imagey = readJPEG(hdurl)
#remove this or ur gonna get hacked lol
#Account Email: dawnc.sols@gmail.com
#Account ID: 37fe2910-d9ad-438e-a597-1581a1b2a40b
library(httr)
library(jsonlite)
library(rjson)
library(jpeg)
library(png)
myAPI = "m47ay41Ny3UV6MfKyz0E7M4PJfRIOpvhR40fksAu"
current_date = Sys.Date()
#hepl https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY&date=2014-10-01&concept_tags=True
newurl = paste0("https://api.nasa.gov/planetary/apod?api_key=", myAPI, "&date=", current_date)
res = GET(newurl)
result <- fromJSON(rawToChar(res$content))
attach(result)
imagey = readJPEG(hdurl, native = FALSE)
result
