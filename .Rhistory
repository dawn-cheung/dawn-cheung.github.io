library(countrycode)
library(shiny)
library(ggpubr)
# Import the data with coordinates
world_map <- map_data("world")
world_map$region <- countrycode(world_map$region, "country.name", "iso3c")
accesstonet <- read.csv("accesstointernet.csv")
netspeed <- read.csv("worldwideInternetSpeed.csv") #ISO2 code used in dataset!
netprice <- read.csv("worldwideMobileDataPricing2019to2023.csv") #ISO2 code used in dataset!
#data cleaning for access to net
access_dataset <- accesstonet %>%
pivot_longer(
cols = D1990:D2022,
names_to = "Dyear",
values_to = "values") %>%
rename(region = Country.Code)
#data cleaning for speed of net
speed_dataset <- netspeed %>%
pivot_longer(
cols = D2017:D2023,
names_to = "Dyear",
values_to = "values") %>%
rename(region = Country.Code)
#data cleaning for price of net
price_dataset <- netprice %>% #im ok i swear its just 2.30am now 3.17
pivot_longer(
cols = D2019:D2023,
names_to = "Dyear",
values_to = "values") %>%
rename(region = Country.Code)
price_dataset$values <- gsub('[$,]', '', price_dataset$values) #apparently the [] is required for non-alphabets?? gonna put this in the what i learned on my own thing.
#filter by year
accessyear <- access_dataset %>% filter(Dyear == "D2020")
#join % pop access with world map
sostupid_map <- left_join(world_map, accessyear, by = "region")
world_map$region <- countrycode(world_map$region, "iso3c", "iso2c") #RESET ISO CODES (applies to priceyear as well)
#filter by year
speedyear <- speed_dataset %>% filter(Dyear == "D2020")
#join internet download speed (Mbps) with world map
sohungry_map <- left_join(world_map, speedyear, by = "region")
#filter by year
priceyear <- price_dataset %>% filter(Dyear == "D2020")
#join internet price with world map
sotired_map <- left_join(world_map, priceyear, by = "region")
sohungry_map$values <- as.numeric(sohungry_map$values)
sotired_map$values <- as.numeric(sotired_map$values)
#group = group connects the points in the correct order
mapplotting <- function(wee, colourscheme) {
mapdataset <- left_join(world_map, wee, by = "region")
ggplot(mapdataset, aes(long, lat, group = group)) +
geom_polygon(aes(fill = values), color = "white", size = 0.03) +
scale_fill_viridis_c(option = colourscheme) +
theme(plot.margin = margin(0, 0, 0, 0, "cm"))
}
mapplotting(access_dataset, "B")
mapplotting(speedyear, "C")
#remove all non-pg13 commenst when setting echo to true
#idea for shiny: have 2 graphs side by side where you can choose which time periods you want to compare with
library(tidyverse)
library(ggplot2)
library(maps)
library(sf)
library(dplyr)
library(countrycode)
library(shiny)
library(ggpubr)
# Import the data with coordinates
world_map <- map_data("world")
world_map$region <- countrycode(world_map$region, "country.name", "iso3c")
accesstonet <- read.csv("accesstointernet.csv")
netspeed <- read.csv("worldwideInternetSpeed.csv") #ISO2 code used in dataset!
netprice <- read.csv("worldwideMobileDataPricing2019to2023.csv") #ISO2 code used in dataset!
#data cleaning for access to net
access_dataset <- accesstonet %>%
pivot_longer(
cols = D1990:D2022,
names_to = "Dyear",
values_to = "values") %>%
rename(region = Country.Code)
#data cleaning for speed of net
speed_dataset <- netspeed %>%
pivot_longer(
cols = D2017:D2023,
names_to = "Dyear",
values_to = "values") %>%
rename(region = Country.Code)
#data cleaning for price of net
price_dataset <- netprice %>% #im ok i swear its just 2.30am now 3.17
pivot_longer(
cols = D2019:D2023,
names_to = "Dyear",
values_to = "values") %>%
rename(region = Country.Code)
price_dataset$values <- gsub('[$,]', '', price_dataset$values) #apparently the [] is required for non-alphabets?? gonna put this in the what i learned on my own thing.
#filter by year
accessyear <- access_dataset %>% filter(Dyear == "D2020")
#join % pop access with world map
sostupid_map <- left_join(world_map, accessyear, by = "region")
world_map$region <- countrycode(world_map$region, "iso3c", "iso2c") #RESET ISO CODES (applies to priceyear as well)
#filter by year
speedyear <- speed_dataset %>% filter(Dyear == "D2020")
#join internet download speed (Mbps) with world map
sohungry_map <- left_join(world_map, speedyear, by = "region")
#filter by year
priceyear <- price_dataset %>% filter(Dyear == "D2020")
#join internet price with world map
sotired_map <- left_join(world_map, priceyear, by = "region")
sohungry_map$values <- as.numeric(sohungry_map$values)
sotired_map$values <- as.numeric(sotired_map$values)
#group = group connects the points in the correct order
mapplotting <- function(wee, colourscheme) {
mapdataset <- left_join(world_map, wee, by = "region")
ggplot(mapdataset, aes(long, lat, group = group)) +
geom_polygon(aes(fill = values), color = "white", size = 0.03) +
scale_fill_viridis_c(option = colourscheme) +
theme(plot.margin = margin(0, 0, 0, 0, "cm"))
}
mapplotting(access_dataset, "B")
mapplotting(speedyear, "C")
#remove all non-pg13 commenst when setting echo to true
#idea for shiny: have 2 graphs side by side where you can choose which time periods you want to compare with
library(tidyverse)
library(ggplot2)
library(maps)
library(sf)
library(dplyr)
library(countrycode)
library(shiny)
library(ggpubr)
# Import the data with coordinates
world_map <- map_data("world")
world_map$region <- countrycode(world_map$region, "country.name", "iso3c")
accesstonet <- read.csv("accesstointernet.csv")
netspeed <- read.csv("worldwideInternetSpeed.csv") #ISO2 code used in dataset!
netprice <- read.csv("worldwideMobileDataPricing2019to2023.csv") #ISO2 code used in dataset!
#data cleaning for access to net
access_dataset <- accesstonet %>%
pivot_longer(
cols = D1990:D2022,
names_to = "Dyear",
values_to = "values") %>%
rename(region = Country.Code)
#data cleaning for speed of net
speed_dataset <- netspeed %>%
pivot_longer(
cols = D2017:D2023,
names_to = "Dyear",
values_to = "values") %>%
rename(region = Country.Code)
#data cleaning for price of net
price_dataset <- netprice %>% #im ok i swear its just 2.30am now 3.17
pivot_longer(
cols = D2019:D2023,
names_to = "Dyear",
values_to = "values") %>%
rename(region = Country.Code)
price_dataset$values <- gsub('[$,]', '', price_dataset$values) #apparently the [] is required for non-alphabets?? gonna put this in the what i learned on my own thing.
#filter by year
accessyear <- access_dataset %>% filter(Dyear == "D2020")
#join % pop access with world map
sostupid_map <- left_join(world_map, accessyear, by = "region")
world_map$region <- countrycode(world_map$region, "iso3c", "iso2c") #RESET ISO CODES (applies to priceyear as well)
#filter by year
speedyear <- speed_dataset %>% filter(Dyear == "D2020")
#join internet download speed (Mbps) with world map
sohungry_map <- left_join(world_map, speedyear, by = "region")
#filter by year
priceyear <- price_dataset %>% filter(Dyear == "D2020")
#join internet price with world map
sotired_map <- left_join(world_map, priceyear, by = "region")
sohungry_map$values <- as.numeric(sohungry_map$values)
sotired_map$values <- as.numeric(sotired_map$values)
#group = group connects the points in the correct order
mapplotting <- function(wee, colourscheme) {
mapdataset <- left_join(world_map, wee, by = "region")
mapdataset$values <- as.numeric(unlist(mapdataset$values))
ggplot(mapdataset, aes(long, lat, group = group)) +
geom_polygon(aes(fill = values), color = "white", size = 0.03) +
scale_fill_viridis_c(option = colourscheme) +
theme(plot.margin = margin(0, 0, 0, 0, "cm"))
}
mapplotting(access_dataset, "B")
mapplotting(speedyear, "C")
mapplotting(priceyear, "C")
econineq <- read.csv("EconomicInequality.csv")
gdpPERCAPITA <- read.csv("gdpPERCAPITA.csv") %>% rename(year = Year) #ISO3 used!
desidata <- read.csv("desi-data.csv") #ISO2 used!
GINIvaluesyearc3 <- econineq %>%
filter(year == 2020) %>%
#select(gini, c3) %>%
rename(region = c3)
GINIvaluesyearc2 <- econineq %>%
filter(year == 2020) %>%
#select(gini, c3) %>%
rename(region = c2)
desi <- desidata %>%
filter(period == "desi_2020") %>%
#select(gini, c2) %>%
rename(region = country)
gdpPERCAPITA <- gdpPERCAPITA %>%
filter(year == 2020) %>%
#select(gini, c3) %>%
rename(region = Code)
accessscatter <- left_join(GINIvaluesyearc3, accessyear, by = "region") %>%
left_join(. , gdpPERCAPITA, by = "region") #In tidyverse, the . refers to the entire object from the lhs of %>% So, it is the data.frame created from the left join of x and y [ADD TO DIARY ENTRY]
accessscatter %>%
drop_na(values) %>%
ggplot(data = accessscatter, mapping = aes(x = values, y = log(gdp), colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
accessscatter %>%
drop_na(values) %>%
ggplot(data = accessscatter, mapping = aes(x = log(values), y = gdp, colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
gdpPERCAPITA$region <- countrycode(gdpPERCAPITA$region, "iso3c", "iso2c") #converting ISO3 to ISO2
speedscatter <- left_join(GINIvaluesyearc2, speedyear, by = "region") %>%
left_join(. , gdpPERCAPITA, by = "region")
options(repr.plot.width = 10, repr.plot.height =3)
speedscatter %>%
drop_na(values) %>%
ggplot(data = speedscatter, mapping = aes(x = GDP.per.capita, y = as.numeric(values), colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
speedscatter %>%
drop_na(values) %>%
ggplot(data = speedscatter, mapping = aes(x = gini, y = as.numeric(values), colour = region_wb)) +
geom_point()
pricescatter <- left_join(GINIvaluesyearc2, priceyear, by = "region") %>%
left_join(. , gdpPERCAPITA, by = "region")
pricescatter %>%
drop_na(values) %>%
ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = GDP.per.capita, colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
pricescatter %>%
drop_na(values) %>%
ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = gdp, colour = region_wb)) +
geom_point() + geom_smooth(method="lm", col="black")
accessyear$region <- countrycode(accessyear$region, "iso3c", "iso2c")
accessyear %>% rename(accessyear_values = values)
priceyear %>% rename(priceyear_values = values) #i keep so much just to laugh at the EU
priceaccessscatter <- left_join(accessyear, priceyear, by = "region")
head(priceaccessscatter)
#priceaccessscatter %>%
#        drop_na(priceyear, accessyear) %>%
#  ggplot(data = priceaccessscatter, mapping = aes(x = as.numeric(priceyear_values), y = accessyear_values, colour = Continental.region)) +
#  geom_point()
#accessyear %>% rename(values = accessyear_values)
#priceyear %>% rename(values = priceyear_values)
AgreeDisagreePie <- function(percent, my_title) {
percent = as.numeric(percent)
data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
ggplot(data, aes(x="", y=amount, fill=category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y") +
labs(title = str_wrap(my_title, 45))
}
ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right"),
AgreeDisagreePie(66, "The internet has improved life in my country"),
AgreeDisagreePie(67, "Using the internet has helped me pursue my education or that of my household members"),
ncol = 3, nrow = 1, labels = c("A", "B", "C"), common.legend = TRUE, legend = "bottom")
ui <- fluidPage(
# App title ----
titlePanel("Shiny Text"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("speedyear", "priceyear", "accessyear")),
sliderInput(inputId = "year",
label = "Choose the year",
min = 1990, max = 2022, value = 2020),
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$dataset,
"accessyear" = accessyear,
"priceyear" = priceyear,
"speedyear" = speedyear)
dataset <- datasetInput() %>% filter(Xyear == paste0("X", input$year))
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
head(dataset)
})
# Show the first "n" observations ----
#output$view <- renderTable({
#  head(datasetInput(), n = input$obs)
#})
}
shinyApp(ui, server)
#remove all non-pg13 commenst when setting echo to true
#idea for shiny: have 2 graphs side by side where you can choose which time periods you want to compare with
library(tidyverse)
library(ggplot2)
library(maps)
library(sf)
library(dplyr)
library(countrycode)
library(shiny)
library(ggpubr)
# Import the data with coordinates
world_map <- map_data("world")
world_map$region <- countrycode(world_map$region, "country.name", "iso3c")
accesstonet <- read.csv("accesstointernet.csv")
netspeed <- read.csv("worldwideInternetSpeed.csv") #ISO2 code used in dataset!
netprice <- read.csv("worldwideMobileDataPricing2019to2023.csv") #ISO2 code used in dataset!
#data cleaning for access to net
access_dataset <- accesstonet %>%
pivot_longer(
cols = D1990:D2022,
names_to = "Dyear",
values_to = "values") %>%
rename(region = Country.Code)
#data cleaning for speed of net
speed_dataset <- netspeed %>%
pivot_longer(
cols = D2017:D2023,
names_to = "Dyear",
values_to = "values") %>%
rename(region = Country.Code)
#data cleaning for price of net
price_dataset <- netprice %>%
pivot_longer(
cols = D2019:D2023,
names_to = "Dyear",
values_to = "values") %>%
rename(region = Country.Code)
price_dataset$values <- gsub('[$,]', '', price_dataset$values)
#filter by year
#accessyear <- access_dataset %>% filter(Dyear == "D2020")
#join % pop access with world map
#sostupid_map <- left_join(world_map, accessyear, by = "region")
world_map$region <- countrycode(world_map$region, "iso3c", "iso2c") #RESET ISO CODES (applies to priceyear as well)
#filter by year
#speedyear <- speed_dataset %>% filter(Dyear == "D2020")
#join internet download speed (Mbps) with world map
#sohungry_map <- left_join(world_map, speedyear, by = "region")
#filter by year
#priceyear <- price_dataset %>% filter(Dyear == "D2020")
#join internet price with world map
#sotired_map <- left_join(world_map, priceyear, by = "region")
#group = group connects the points in the correct order
mapplotting <- function(wee, dayear, colourscheme) {
if(identical(wee, access_dataset)) { #THIS DROVE ME INSANE WHY == CANNOT FOR unequal number of data hngggg
world_map$region <- countrycode(world_map$region, "iso2c", "iso3c")
print("isTRUE(wee$values == accessyear$values")
} else {
world_map$region <- countrycode(world_map$region, "iso3c", "iso2c")
print("nop")
}
wee <- wee %>% filter(Dyear == paste0("D", dayear))
mapdataset <- left_join(world_map, wee, by = "region")
mapdataset$values <- as.numeric(mapdataset$values)
print(head(mapdataset))
ggplot(mapdataset, aes(long, lat, group = group)) +
geom_polygon(aes(fill = values), color = "white", size = 0.03) +
scale_fill_viridis_c(option = colourscheme) +
theme(plot.margin = margin(0, 0, 0, 0, "cm"))
}
mapplotting(access_dataset, 2019, "B")
mapplotting(speed_dataset, 2019,"C")
mapplotting(price_dataset, 2019,"C")
econineq <- read.csv("EconomicInequality.csv")
gdpPERCAPITA <- read.csv("gdpPERCAPITA.csv") %>% rename(year = Year) #ISO3 used!
desidata <- read.csv("desi-data.csv") #ISO2 used!
GINIvaluesyearc3 <- econineq %>%
filter(year == 2020) %>%
#select(gini, c3) %>%
rename(region = c3)
GINIvaluesyearc2 <- econineq %>%
filter(year == 2020) %>%
#select(gini, c3) %>%
rename(region = c2)
desi <- desidata %>%
filter(period == "desi_2020") %>%
#select(gini, c2) %>%
rename(region = country)
gdpPERCAPITA <- gdpPERCAPITA %>%
filter(year == 2020) %>%
#select(gini, c3) %>%
rename(region = Code)
accessscatter <- left_join(GINIvaluesyearc3, accessyear, by = "region") %>%
left_join(. , gdpPERCAPITA, by = "region") #In tidyverse, the . refers to the entire object from the lhs of %>% So, it is the data.frame created from the left join of x and y [ADD TO DIARY ENTRY]
accessscatter %>%
drop_na(values) %>%
ggplot(data = accessscatter, mapping = aes(x = values, y = log(gdp), colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
accessscatter %>%
drop_na(values) %>%
ggplot(data = accessscatter, mapping = aes(x = log(values), y = gdp, colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
gdpPERCAPITA$region <- countrycode(gdpPERCAPITA$region, "iso3c", "iso2c") #converting ISO3 to ISO2
speedscatter <- left_join(GINIvaluesyearc2, speedyear, by = "region") %>%
left_join(. , gdpPERCAPITA, by = "region")
options(repr.plot.width = 10, repr.plot.height =3)
speedscatter %>%
drop_na(values) %>%
ggplot(data = speedscatter, mapping = aes(x = GDP.per.capita, y = as.numeric(values), colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
speedscatter %>%
drop_na(values) %>%
ggplot(data = speedscatter, mapping = aes(x = gini, y = as.numeric(values), colour = region_wb)) +
geom_point()
pricescatter <- left_join(GINIvaluesyearc2, priceyear, by = "region") %>%
left_join(. , gdpPERCAPITA, by = "region")
pricescatter %>%
drop_na(values) %>%
ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = GDP.per.capita, colour = gini)) +
geom_point() + geom_smooth(method="lm", col="black")
pricescatter %>%
drop_na(values) %>%
ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = gdp, colour = region_wb)) +
geom_point() + geom_smooth(method="lm", col="black")
accessyear$region <- countrycode(accessyear$region, "iso3c", "iso2c")
accessyear %>% rename(accessyear_values = values)
priceyear %>% rename(priceyear_values = values) #i keep so much just to laugh at the EU
priceaccessscatter <- left_join(accessyear, priceyear, by = "region")
head(priceaccessscatter)
#priceaccessscatter %>%
#        drop_na(priceyear, accessyear) %>%
#  ggplot(data = priceaccessscatter, mapping = aes(x = as.numeric(priceyear_values), y = accessyear_values, colour = Continental.region)) +
#  geom_point()
#accessyear %>% rename(values = accessyear_values)
#priceyear %>% rename(values = priceyear_values)
AgreeDisagreePie <- function(percent, my_title) {
percent = as.numeric(percent)
data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
ggplot(data, aes(x="", y=amount, fill=category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y") +
labs(title = str_wrap(my_title, 45))
}
ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right"),
AgreeDisagreePie(66, "The internet has improved life in my country"),
AgreeDisagreePie(67, "Using the internet has helped me pursue my education or that of my household members"),
ncol = 3, nrow = 1, labels = c("A", "B", "C"), common.legend = TRUE, legend = "bottom")
ui <- fluidPage(
# App title ----
titlePanel("Shiny Text"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("speedyear", "priceyear", "accessyear")),
sliderInput(inputId = "year",
label = "Choose the year",
min = 1990, max = 2022, value = 2020),
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$dataset,
"accessyear" = accessyear,
"priceyear" = priceyear,
"speedyear" = speedyear)
dataset <- datasetInput() %>% filter(Xyear == paste0("X", input$year))
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
head(dataset)
})
# Show the first "n" observations ----
#output$view <- renderTable({
#  head(datasetInput(), n = input$obs)
#})
}
shinyApp(ui, server)
paste0("D", 2020)
shiny::runApp('MyShinyApp')
runApp('MyShinyApp')
runApp('MyShinyApp')
runApp('MyShinyApp')
runApp('MyShinyApp')
runApp('MyShinyApp')
runApp('MyShinyApp')
runApp('MyShinyApp')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='myshinyappplease',
token='133528B7A8F68F458CB66F530700BA26',
secret='DAwYvUzUuwViYEm9GSQ9JMJGtEyGzNuf4OeWrECA')
runApp('MyShinyApp')
runApp('MyShinyApp')
runApp('MyShinyApp')
runApp('MyShinyApp')
runApp('MyShinyApp')
runApp('MyShinyApp')
runApp('MyShinyApp')
runApp('MyShinyApp')
5f25ef319b7c8807ecfee9ca8571aee1 <- readRDS("~/GitHub/dawn-cheung.github.io/MyShinyApp/cache/5f25ef319b7c8807ecfee9ca8571aee1.rds")
