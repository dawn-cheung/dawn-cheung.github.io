---
title: "dawn-cheung"
output: html_document
---

*Work in progress for final project*

<iframe height="435" width="115%" frameborder="no" src="https://myshinyappplease.shinyapps.io/MyShinyApp/">

</iframe>

```{r myversion, eval=FALSE,echo=FALSE, warning=FALSE, message=FALSE, fig.height = 6, fig.width = 12}
#remove all non-pg13 commenst when setting echo to true
library(tidyverse)
library(ggplot2)
library(maps)
library(sf)
library(dplyr)
library(countrycode)
library(shiny)
library(ggpubr)
library(rsconnect)
library(plotly)

#Shiny app:
#https://myshinyappplease.shinyapps.io/MyShinyApp/

#FROM PREVIOUS CODE
#group = group connects the points in the correct order
mapplotting <- function(wee, dayear, colourscheme) {
  weep <- wee %>% filter(Dyear == paste0("D", dayear))
  weep$values <- as.numeric(weep$values)
  mapdataset <- left_join(world_map, weep, by = "region")
  ggplot(mapdataset, aes(long, lat, group = group)) +
    geom_polygon(aes(fill = values), color = "white", size = 0.03) +
    scale_fill_viridis_c(option = colourscheme) +
    theme(plot.margin = margin(0, 0, 0, 0, "cm"))
}

#SOURCES:
#accesstointernet.csv: https://data.worldbank.org/indicator/IT.NET.USER.ZS?end=2022&start=2009&view=chart [Individuals using the Internet (% of population)]
#https://www.statista.com/statistics/262966/number-of-internet-users-in-selected-countries/ + https://www.worldometers.info/world-population/japan-population/ [to estimate Individuals using the Internet (% of population) in 2022 where there was insufficient data in the earlier datatset]

# Import the data with coordinates
world_map <- map_data("world")
world_map$region <- countrycode(world_map$region, "country.name", "iso3c")
isocode <- c("iso3") #keeps track of what iso code we're on and im so sorry i couldnt be bothered to figure out how to tag it onto word_map itself
access_dataset <- read.csv("accesstointernet.csv")
speed_dataset <- read.csv("worldwideInternetSpeed.csv") #ISO2 code used in dataset!
price_dataset <- read.csv("worldwideMobileDataPricing2019to2023.csv") #ISO2 code used in dataset!

price_dataset$values <- gsub('[$,]', '', price_dataset$values) 

#CHANGING METHOD: left_join() access, price and speed datasets with world map datasets, THEN filter by year
#this is inline with preprocessing, a data optmising technique, to "make the data ready for use beforehand"

#sostupid_map <- left_join(world_map, access_dataset, by = "region")
#world_map$region <- countrycode(world_map$region, "iso3c", "iso2c") #RESET ISO CODES
#isocode <- "iso2c"
#sohungry_map <- left_join(world_map, speed_dataset, by = "region")
#sotired_map <- left_join(world_map, price_dataset, by = "region")

#group = group connects the points in the correct order
mapplotting <- function(wee, dayear, colourscheme) {
  if(identical(wee, access_dataset)) { 
    if (isocode == "iso2c") { #its a global variable so its fine
      world_map$region <- countrycode(world_map$region, "iso2c", "iso3c")
      isocode == "iso3c"
    } 
  } else {
      if (isocode == "iso3c") {
        world_map$region <- countrycode(world_map$region, "iso3c", "iso2c")
        isocode == "iso2c"
      }
  }
  weep <- wee %>% filter(Dyear == paste0("D", dayear))
  weep$values <- as.numeric(weep$values)
  mapdataset <- left_join(world_map, weep, by = "region")
  ggplot(mapdataset, aes(long, lat, group = group)) +
    geom_polygon(aes(fill = values), color = "white", size = 0.03) +
    scale_fill_viridis_c(option = colourscheme) +
    theme(plot.margin = margin(0, 0, 0, 0, "cm"))
}

#mapplotting(access_dataset, 2019, "B")
#mapplotting(speed_dataset, 2019,"C")
#mapplotting(price_dataset, 2019,"C")

accessyear <- sostupid_map %>% filter(Dyear == "D2020")
speedyear <- speed_dataset %>% filter(Dyear == "D2020")
priceyear <- sotired_map %>% filter(Dyear == "D2020")

econineq <- read.csv("EconomicInequality.csv") #converted into ISO3! also gdp is literally just gdp
desidata <- read.csv("desi-data.csv") #ISO2 used!

econindicator <- econineq %>%
  filter(year == 2020)
  #select(gini, c3)

desidata$region <- countrycode(desidata$region, "iso2c", "iso3c")
write.csv(desidata$region, "C:\Users\dcsil\OneDrive\Documents\GitHub\dawn-cheung.github.io\desi-data.csv")

accessscatter <- left_join(econindicator, accessyear, by = "region")
accessscatter %>% 
        drop_na(values) %>%
  ggplot(data = accessscatter, mapping = aes(x = values, y = log(gdp), colour = gini)) +
  geom_point() + geom_smooth(method="lm", col="black")

accessscatter %>% 
        drop_na(values) %>%
  ggplot(data = accessscatter, mapping = aes(x = log(values), y = gdp, colour = gini)) +
  geom_point() + geom_smooth(method="lm", col="black")

speedscatter <- left_join(econindicator, speedyear, by = "region")

options(repr.plot.width = 10, repr.plot.height =3) 
speedscatter %>% 
        drop_na(values) %>%
  ggplot(data = speedscatter, mapping = aes(x = gdp, y = as.numeric(values), colour = gini)) +
  geom_point() + geom_smooth(method="lm", col="black")

speedscatter %>% 
        drop_na(values) %>%
  ggplot(data = speedscatter, mapping = aes(x = gini, y = as.numeric(values), colour = region_wb)) +
  geom_point()

pricescatter <- left_join(econindicator, priceyear, by = "region") %>%
  left_join(. , gdpPERCAPITA, by = "region")
pricescatter %>% 
        drop_na(values) %>%
  ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = gdp, colour = gini)) +
  geom_point() + geom_smooth(method="lm", col="black")

pricescatter %>% 
        drop_na(values) %>%
  ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = gdp, colour = region_wb)) +
  geom_point() + geom_smooth(method="lm", col="black")

accessyear$region <- countrycode(accessyear$region, "iso3c", "iso2c")
accessyear %>% rename(accessyear_values = values)
priceyear %>% rename(priceyear_values = values) #i keep so much just to laugh at the EU
priceaccessscatter <- left_join(accessyear, priceyear, by = "region")

#priceaccessscatter %>% 
#        drop_na(priceyear, accessyear) %>%
#  ggplot(data = priceaccessscatter, mapping = aes(x = as.numeric(priceyear_values), y = accessyear_values, colour = Continental.region)) +
#  geom_point()

#accessyear %>% rename(values = accessyear_values)
#priceyear %>% rename(values = priceyear_values)

AgreeDisagreePie <- function(percent, my_title) {
  percent = as.numeric(percent)
  data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
  ggplot(data, aes(x="", y=amount, fill=category)) +
    geom_bar(stat="identity", width=1) +
    coord_polar("y") +
    labs(title = str_wrap(my_title, 45))
}

ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right"),
          AgreeDisagreePie(66, "The internet has improved life in my country"),
          AgreeDisagreePie(67, "Using the internet has helped me pursue my education or that of my household members"),
          ncol = 3, nrow = 1, labels = c("A", "B", "C"), common.legend = TRUE, legend = "bottom") 
```

```{r unbroken, eval=TRUE, echo=FALSE, warning=FALSE, message=FALSE, fig.height = 6, fig.width = 14}
#remove all non-pg13 commenst when setting echo to true
library(tidyverse)
library(ggplot2)
library(maps)
library(sf)
library(dplyr)
library(countrycode)
library(shiny)
library(ggpubr)
library(rsconnect)
library(plotly)

#Shiny app:
#https://myshinyappplease.shinyapps.io/MyShinyApp/

#HARDCODE ALL DATASETS INTO ISO3 PLS

# Import the data with coordinates
world_map <- map_data("world")
world_map$region <- countrycode(world_map$region, "country.name", "iso3c")

access_dataset <- read.csv("accesstointernet.csv")
speed_dataset <- read.csv("worldwideInternetSpeed.csv")
price_dataset <- read.csv("worldwideMobileDataPricing2019to2023.csv")

#filter by year
accessyear <- access_dataset %>% filter(Dyear == "D2020")
speedyear <- speed_dataset %>% filter(Dyear == "D2020")
priceyear <- price_dataset %>% filter(Dyear == "D2020")

econineq <- read.csv("EconomicInequality.csv") #ISO3 used
desidata <- read.csv("desi-data.csv") #ISO3 used!
gdpPERCAPITA <- read.csv("gdpPERCAPITA.csv")

econindicator <- econineq %>% 
  filter(year == 2020) #%>% #MY PROPOSED SOLUTION: use gini ONLY FOR COLOURATION. do NOT use gini values for xy values
  #filter(scale == "Equivalized")
desi <- desidata %>% filter(year == "2020")
gdpPERCAPITA <- gdpPERCAPITA %>% filter(year == 2020)

econindicator$gini <- as.numeric(econindicator$gini)
gdpPERCAPITA$GDP.per.capita <- as.numeric(gdpPERCAPITA$GDP.per.capita)
speedyear$values <- as.numeric(speedyear$values)
priceyear$values <- as.numeric(priceyear$values)

accessscatter <- left_join(econindicator, accessyear, by = "region")  %>%
  left_join(. , gdpPERCAPITA, by = "region")
accessscatter %>%  #KEEPING
        drop_na(values) %>%
  ggplot(data = accessscatter, mapping = aes(x = values, y = log(GDP.per.capita), colour = gini)) +
  geom_point() + 
  labs(x = "Percentage of the population using the Internet", y = "logarithm of GDP per capita", title = "How acess to the internet affects economic output") +
  geom_smooth(method="lm", col="black")  +
  theme(plot.title=element_text(size=35))



pricescatter <- left_join(econindicator, priceyear, by = "region")  %>%
  left_join(. , gdpPERCAPITA, by = "region")

pricescatter %>% 
        drop_na(values) %>%
  ggplot(data = pricescatter, mapping = aes(x = GDP.per.capita, y = as.numeric(values))) +
  geom_point() + geom_smooth(method="lm", col="black")



accessyear <- accessyear %>% rename(accessyear_values = values)
priceyear <- priceyear %>% rename(priceyear_values = values) #i keep so much just to laugh at the EU
speedyear <- speedyear %>% rename(speedyear_values = values)

priceaccessscatter <- left_join(accessyear, priceyear, by = "region") %>%
  left_join(. , econindicator, by = "region")

priceaccessscatter %>% 
        drop_na(priceyear, accessyear) %>%
  ggplot(data = priceaccessscatter, mapping = aes(x = as.numeric(priceyear_values), y = accessyear_values, colour = Continental.region)) +
  geom_point() + geom_smooth(method="lm", col="black")

pricespeedcatter <- left_join(speedyear, priceyear, by = "region") %>%
  left_join(. , econindicator, by = "region")

pricespeedcatter %>% 
        drop_na(priceyear, speedyear) %>%
  ggplot(data = pricespeedcatter, mapping = aes(x = as.numeric(priceyear_values), y = speedyear_values)) +
  geom_point() + geom_smooth(method="lm", col="black")

accessyear <- accessyear %>% rename(values = accessyear_values)
priceyear <- priceyear %>% rename(values = priceyear_values)
```

```{r GDPoverSPEED, eval=TRUE, echo=FALSE, warning=FALSE, message=FALSE, fig.height = 6, fig.width = 14}
#remove all non-pg13 commenst when setting echo to true
speedscatter <- left_join(econindicator, speedyear, by = "region")  %>%
  left_join(. , gdpPERCAPITA, by = c("region", "year"))

speedscatter %>% #KEEPING
  drop_na(values) %>%
  ggplot(data = speedscatter, mapping = aes(x = values, y = GDP.per.capita, colour = gini)) +
  geom_point() + 
  labs(x = "Speed of Internet", y = "GDP per capita", title = "How economic development affects mean speed of internet") +
  geom_smooth(method="lm", col="black")  +
  theme(plot.title=element_text(size=35))
```

```{r 3i-survey-pie-charts, eval=TRUE, echo=FALSE, warning=FALSE, message=FALSE, fig.height = 6, fig.width = 14}
AgreeDisagreePie <- function(percent, my_title) {
  percent = as.numeric(percent)
  data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
  ggplot(data, aes(x="", y=amount, fill=category)) +
    geom_bar(stat="identity", width=1) +
    coord_polar("y") +
    labs(title = str_wrap(my_title, 40)) +
    geom_text(aes(label = paste0(amount, "%")), position = position_stack(vjust = 0.5)) +
    theme_void() +
    theme(plot.title = element_text(size=15),
          axis.title = element_text(size=10),
          plot.margin = margin(0, 0.2, 0, 1.5, "cm"))
}

ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right"),
          AgreeDisagreePie(66, "The internet has improved life in my country"),
          AgreeDisagreePie(67, "Using the internet has helped me pursue my education or that of my household members"),
          ncol = 3, nrow = 1, labels = c("A", "B", "C"), common.legend = TRUE, legend = "bottom") 
```

\(1\) Hi! I'm Dawn, a year one communications and new media student. I like to bake but no one eats what I make.\
\
(2) github folder: <https://github.com/dawn-cheung/NM2207-Folder-Upload>
