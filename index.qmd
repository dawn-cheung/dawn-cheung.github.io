---
title: "dawn-cheung"
output: html_document
runtime: shiny
---

*Work in progress for final project*

mapplotting \<- function(mapdataset, filldata, colourscheme) {

ggplot(mapdataset, aes(long, lat, group = group)) +

geom_polygon(aes(fill = filldata), color = "white", size = 0.03) +

scale_fill_viridis_c(option = colourscheme) +

theme(plot.margin = margin(0, 0, 0, 0, "cm"))

}

```{r, eval=TRUE,echo=FALSE, warning=FALSE, message=FALSE, fig.height = 6, fig.width = 12}
#remove all non-pg13 commenst when setting echo to true
#idea for shiny: have 2 graphs side by side where you can choose which time periods you want to compare with
library(tidyverse)
library(ggplot2)
library(maps)
library(sf)
library(dplyr)
library(countrycode)
library(shiny)
library(ggpubr)

# Import the data with coordinates
world_map <- map_data("world")
world_map$region <- countrycode(world_map$region, "country.name", "iso3c")
accesstonet <- read.csv("accesstointernet.csv")
netspeed <- read.csv("worldwideInternetSpeed.csv") #ISO2 code used in dataset!
netprice <- read.csv("worldwideMobileDataPricing2019to2023.csv") #ISO2 code used in dataset!

#data cleaning for access to net
access_dataset <- accesstonet %>%
   pivot_longer(
    cols = X1990:X2022,
    names_to = "Xyear",
    values_to = "values") %>%
  rename(region = Country.Code)

#data cleaning for speed of net
speed_dataset <- netspeed %>%
   pivot_longer(
    cols = D2017:D2023,
    names_to = "Dyear",
    values_to = "values") %>%
  rename(region = Country.Code)

#data cleaning for price of net
price_dataset <- netprice %>% #im ok i swear its just 2.30am now 3.17
   pivot_longer(
    cols = D2019:D2023,
    names_to = "Dyear",
    values_to = "values") %>%
  rename(region = Country.Code)

price_dataset$values <- gsub('[$,]', '', price_dataset$values) #apparently the [] is required for non-alphabets?? gonna put this in the what i learned on my own thing.

#filter by year
accessyear <- access_dataset %>% filter(Xyear == "X2020")
#join % pop access with world map
sostupid_map <- left_join(world_map, accessyear, by = "region")

world_map$region <- countrycode(world_map$region, "iso3c", "iso2c") #RESET ISO CODES (applies to priceyear as well)

#filter by year
speedyear <- speed_dataset %>% filter(Dyear == "D2020")
#join internet download speed (Mbps) with world map
sohungry_map <- left_join(world_map, speedyear, by = "region")

#filter by year
priceyear <- price_dataset %>% filter(Dyear == "D2020")
#join internet price with world map
sotired_map <- left_join(world_map, priceyear, by = "region")

sohungry_map$values <- as.numeric(sohungry_map$values)
sotired_map$values <- as.numeric(sotired_map$values)

#group = group connects the points in the correct order
mapplotting <- function(mapdataset, filldata, colourscheme) {
  ggplot(mapdataset, aes(long, lat, group = group)) +
    geom_polygon(aes(fill = filldata), color = "white", size = 0.03) +
    scale_fill_viridis_c(option = colourscheme) +
    theme(plot.margin = margin(0, 0, 0, 0, "cm"))
}

mapplotting(sostupid_map, sostupid_map$values, "B")
mapplotting(sohungry_map, sohungry_map$values, "C")
mapplotting(sotired_map, sotired_map$values, "C")

econineq <- read.csv("EconomicInequality.csv")
gdpPERCAPITA <- read.csv("gdpPERCAPITA.csv") %>% rename(year = Year) #ISO3 used!
desidata <- read.csv("desi-data.csv") #ISO2 used!

GINIvaluesyearc3 <- econineq %>%
  filter(year == 2020) %>%
  #select(gini, c3) %>%
  rename(region = c3)

GINIvaluesyearc2 <- econineq %>%
  filter(year == 2020) %>%
  #select(gini, c3) %>%
  rename(region = c2)

desi <- desidata %>%
  filter(period == "desi_2020") %>%
  #select(gini, c2) %>%
  rename(region = country)

gdpPERCAPITA <- gdpPERCAPITA %>%
  filter(year == 2020) %>%
  #select(gini, c3) %>%
  rename(region = Code)

accessscatter <- left_join(GINIvaluesyearc3, accessyear, by = "region") %>%
  left_join(. , gdpPERCAPITA, by = "region") #In tidyverse, the . refers to the entire object from the lhs of %>% So, it is the data.frame created from the left join of x and y [ADD TO DIARY ENTRY]

accessscatter %>% 
        drop_na(values) %>%
  ggplot(data = accessscatter, mapping = aes(x = values, y = log(gdp), colour = gini)) +
  geom_point() + geom_smooth(method="lm", col="black")

accessscatter %>% 
        drop_na(values) %>%
  ggplot(data = accessscatter, mapping = aes(x = log(values), y = gdp, colour = gini)) +
  geom_point() + geom_smooth(method="lm", col="black")

gdpPERCAPITA$region <- countrycode(gdpPERCAPITA$region, "iso3c", "iso2c") #converting ISO3 to ISO2
speedscatter <- left_join(GINIvaluesyearc2, speedyear, by = "region") %>%
  left_join(. , gdpPERCAPITA, by = "region")

options(repr.plot.width = 10, repr.plot.height =3) 
speedscatter %>% 
        drop_na(values) %>%
  ggplot(data = speedscatter, mapping = aes(x = GDP.per.capita, y = as.numeric(values), colour = gini)) +
  geom_point() + geom_smooth(method="lm", col="black")

speedscatter %>% 
        drop_na(values) %>%
  ggplot(data = speedscatter, mapping = aes(x = gini, y = as.numeric(values), colour = region_wb)) +
  geom_point()

pricescatter <- left_join(GINIvaluesyearc2, priceyear, by = "region") %>%
  left_join(. , gdpPERCAPITA, by = "region")
pricescatter %>% 
        drop_na(values) %>%
  ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = GDP.per.capita, colour = gini)) +
  geom_point() + geom_smooth(method="lm", col="black")

pricescatter %>% 
        drop_na(values) %>%
  ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = gdp, colour = region_wb)) +
  geom_point() + geom_smooth(method="lm", col="black")

accessyear$region <- countrycode(accessyear$region, "iso3c", "iso2c")
accessyear %>% rename(accessyear_values = values)
priceyear %>% rename(priceyear_values = values) #i keep so much just to laugh at the EU
priceaccessscatter <- left_join(accessyear, priceyear, by = "region")
head(priceaccessscatter)
#priceaccessscatter %>% 
#        drop_na(priceyear, accessyear) %>%
#  ggplot(data = priceaccessscatter, mapping = aes(x = as.numeric(priceyear_values), y = accessyear_values, colour = Continental.region)) +
#  geom_point()

#accessyear %>% rename(values = accessyear_values)
#priceyear %>% rename(values = priceyear_values)

AgreeDisagreePie <- function(percent, my_title) {
  percent = as.numeric(percent)
  data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
  ggplot(data, aes(x="", y=amount, fill=category)) +
    geom_bar(stat="identity", width=1) +
    coord_polar("y") +
    labs(title = str_wrap(my_title, 45))
}

ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right"),
          AgreeDisagreePie(66, "The internet has improved life in my country"),
          AgreeDisagreePie(67, "Using the internet has helped me pursue my education or that of my household members"),
          ncol = 3, nrow = 1, labels = c("A", "B", "C"), common.legend = TRUE, legend = "bottom") 


# Define UI for dataset viewer app ----
ui <- fluidPage(
  # App title ----
  titlePanel("my head hurts"),
  # Sidebar layout with input and output definitions ----
  sidebarLayout(
    # Sidebar panel for inputs ----
    sidebarPanel(
      # Input: Selector for choosing year ----
      selectInput(inputId = "year",
                  label = "Choose a year:",
                  choices = c(2000:2020))
    ),

    # Main panel for displaying outputs ----
    mainPanel(
      
      # Output: Verbatim text for data summary ----
      plotOutput(outputId = "mapy")
      
    )
  )
)

# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
  filtered_data <- reactive({
    access_dataset %>%
      filter(Xyear == paste0("X", as.character(input$year)))
  })
  
  mapplotting <- reactive(function(mapdataset, filldata, colourscheme) {
    price_dataset$values <- gsub('[$,]', '', price_dataset$values) 
    #join % pop access with world map
    sostupid_map <- left_join(world_map, filtered_data(), by = "region")

    #filter by year
    speedyear <- speed_dataset %>% filter(Dyear == "D2020")
    #filter by year AND download speed: speedyear <- speed_dataset %>% filter(Dyear == "D2020", values<70)

    world_map$region <- countrycode(world_map$region, "iso3c", "iso2c") #RESET ISO CODES (applies to priceyear as well)
    #join internet download speed (Mbps) with world map
    sohungry_map <- left_join(world_map, speedyear, by = "region")

    #filter by year
    priceyear <- price_dataset %>% filter(Dyear == "D2020")
    #join internet price with world map
    sotired_map <- left_join(world_map, priceyear, by = "region")

    sohungry_map$values <- as.numeric(sohungry_map$values)
    sotired_map$values <- as.numeric(sotired_map$values)

    
    ggplot(mapdataset, aes(long, lat, group = group)) +
      geom_polygon(aes(fill = filldata), color = "white", size = 0.03) +
      scale_fill_viridis_c(option = colourscheme) +
      theme(plot.margin = margin(0, 0, 0, 0, "cm"))
  })
  output$mapy <- renderPlot({
    mapplotting(sostupid_map, sostupid_map$values, "B")
  })
  
}

# Create Shiny app ----
#shinyApp(ui, server)

```

\(1\) Hi! I'm Dawn, a year one communications and new media student. I like to bake but no one eats what I make.\
\
(2) github folder: <https://github.com/dawn-cheung/NM2207-Folder-Upload>
