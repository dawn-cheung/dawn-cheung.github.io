---
title: "dawn-cheung"
output: html_document
---

*Work in progress for final project*

<iframe height="425" width="145%" frameborder="no" src="https://myshinyappplease.shinyapps.io/MyShinyApp/">

</iframe>

```{r myversion, eval=TRUE,echo=FALSE, warning=FALSE, message=FALSE, fig.height = 6, fig.width = 12}
#remove all non-pg13 commenst when setting echo to true
#idea for shiny: have 2 graphs side by side where you can choose which time periods you want to compare with
library(tidyverse)
library(ggplot2)
library(maps)
library(sf)
library(dplyr)
library(countrycode)
library(shiny)
library(ggpubr)
library(rsconnect)

#Shiny app:
#https://myshinyappplease.shinyapps.io/MyShinyApp/


#SOURCES:
#accesstointernet.csv: https://data.worldbank.org/indicator/IT.NET.USER.ZS?end=2022&start=2009&view=chart [Individuals using the Internet (% of population)]
#https://www.statista.com/statistics/262966/number-of-internet-users-in-selected-countries/ + https://www.worldometers.info/world-population/japan-population/ [to estimate Individuals using the Internet (% of population) in 2022 where there was insufficient data in the earlier datatset]

# Import the data with coordinates
world_map <- map_data("world")
world_map$region <- countrycode(world_map$region, "country.name", "iso3c")
ISOCODESAREGGFKINGKILLME <- c("iso3") #keeps track of what iso code we're on and im so sorry i couldnt be bothered to figure out how to tag it onto word_map itself
accesstonet <- read.csv("accesstointernet.csv")
netspeed <- read.csv("worldwideInternetSpeed.csv") #ISO2 code used in dataset!
netprice <- read.csv("worldwideMobileDataPricing2019to2023.csv") #ISO2 code used in dataset!

#data cleaning for access to net
access_dataset <- accesstonet %>%
   pivot_longer(
    cols = D1990:D2022,
    names_to = "Dyear",
    values_to = "values") %>%
  rename(region = Country.Code)

#data cleaning for speed of net
speed_dataset <- netspeed %>%
   pivot_longer(
    cols = D2017:D2023,
    names_to = "Dyear",
    values_to = "values") %>%
  rename(region = Country.Code)

#data cleaning for price of net
price_dataset <- netprice %>% 
   pivot_longer(
    cols = D2019:D2023,
    names_to = "Dyear",
    values_to = "values") %>%
  rename(region = Country.Code)

price_dataset$values <- gsub('[$,]', '', price_dataset$values) 

#filter by year
accessyear <- access_dataset %>% filter(Dyear == "D2020")
sostupid_map <- left_join(world_map, accessyear, by = "region")

world_map$region <- countrycode(world_map$region, "iso3c", "iso2c") #RESET ISO CODES
ISOCODESAREGGFKINGKILLME <- "iso2c"

speedyear <- speed_dataset %>% filter(Dyear == "D2020")
sohungry_map <- left_join(world_map, speedyear, by = "region")

priceyear <- price_dataset %>% filter(Dyear == "D2020")
sotired_map <- left_join(world_map, priceyear, by = "region")

#group = group connects the points in the correct order
mapplotting <- function(wee, dayear, colourscheme) {
  if(identical(wee, access_dataset)) { 
    if (ISOCODESAREGGFKINGKILLME == "iso2c") { #its a global variable so its fine
      world_map$region <- countrycode(world_map$region, "iso2c", "iso3c")
      ISOCODESAREGGFKINGKILLME == "iso3c"
    } 
  } else {
      if (ISOCODESAREGGFKINGKILLME == "iso3c") {
        world_map$region <- countrycode(world_map$region, "iso3c", "iso2c")
        ISOCODESAREGGFKINGKILLME == "iso2c"
      }
  }
  weep <- wee %>% filter(Dyear == paste0("D", dayear))
  weep$values <- as.numeric(weep$values)
  mapdataset <- left_join(world_map, weep, by = "region")
  ggplot(mapdataset, aes(long, lat, group = group)) +
    geom_polygon(aes(fill = values), color = "white", size = 0.03) +
    scale_fill_viridis_c(option = colourscheme) +
    theme(plot.margin = margin(0, 0, 0, 0, "cm"))
}

mapplotting(access_dataset, 2019, "B")
mapplotting(speed_dataset, 2019,"C")
mapplotting(price_dataset, 2019,"C")

econineq <- read.csv("EconomicInequality.csv")
gdpPERCAPITA <- read.csv("gdpPERCAPITA.csv") %>% rename(year = Year) #ISO3 used!
desidata <- read.csv("desi-data.csv") #ISO2 used!

GINIvaluesyearc3 <- econineq %>%
  filter(year == 2020) %>%
  #select(gini, c3) %>%
  rename(region = c3)

GINIvaluesyearc2 <- econineq %>%
  filter(year == 2020) %>%
  #select(gini, c3) %>%
  rename(region = c2)

desi <- desidata %>%
  filter(period == "desi_2020") %>%
  #select(gini, c2) %>%
  rename(region = country)

gdpPERCAPITA <- gdpPERCAPITA %>%
  filter(year == 2020) %>%
  #select(gini, c3) %>%
  rename(region = Code)

accessscatter <- left_join(GINIvaluesyearc3, accessyear, by = "region") %>%
  left_join(. , gdpPERCAPITA, by = "region") #In tidyverse, the . refers to the entire object from the lhs of %>% So, it is the data.frame created from the left join of x and y [ADD TO DIARY ENTRY]

accessscatter %>% 
        drop_na(values) %>%
  ggplot(data = accessscatter, mapping = aes(x = values, y = log(gdp), colour = gini)) +
  geom_point() + geom_smooth(method="lm", col="black")

accessscatter %>% 
        drop_na(values) %>%
  ggplot(data = accessscatter, mapping = aes(x = log(values), y = gdp, colour = gini)) +
  geom_point() + geom_smooth(method="lm", col="black")

gdpPERCAPITA$region <- countrycode(gdpPERCAPITA$region, "iso3c", "iso2c") #converting ISO3 to ISO2
speedscatter <- left_join(GINIvaluesyearc2, speedyear, by = "region") %>%
  left_join(. , gdpPERCAPITA, by = "region")

options(repr.plot.width = 10, repr.plot.height =3) 
speedscatter %>% 
        drop_na(values) %>%
  ggplot(data = speedscatter, mapping = aes(x = GDP.per.capita, y = as.numeric(values), colour = gini)) +
  geom_point() + geom_smooth(method="lm", col="black")

speedscatter %>% 
        drop_na(values) %>%
  ggplot(data = speedscatter, mapping = aes(x = gini, y = as.numeric(values), colour = region_wb)) +
  geom_point()

pricescatter <- left_join(GINIvaluesyearc2, priceyear, by = "region") %>%
  left_join(. , gdpPERCAPITA, by = "region")
pricescatter %>% 
        drop_na(values) %>%
  ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = GDP.per.capita, colour = gini)) +
  geom_point() + geom_smooth(method="lm", col="black")

pricescatter %>% 
        drop_na(values) %>%
  ggplot(data = pricescatter, mapping = aes(x = as.numeric(values), y = gdp, colour = region_wb)) +
  geom_point() + geom_smooth(method="lm", col="black")

accessyear$region <- countrycode(accessyear$region, "iso3c", "iso2c")
accessyear %>% rename(accessyear_values = values)
priceyear %>% rename(priceyear_values = values) #i keep so much just to laugh at the EU
priceaccessscatter <- left_join(accessyear, priceyear, by = "region")
head(priceaccessscatter)
#priceaccessscatter %>% 
#        drop_na(priceyear, accessyear) %>%
#  ggplot(data = priceaccessscatter, mapping = aes(x = as.numeric(priceyear_values), y = accessyear_values, colour = Continental.region)) +
#  geom_point()

#accessyear %>% rename(values = accessyear_values)
#priceyear %>% rename(values = priceyear_values)

AgreeDisagreePie <- function(percent, my_title) {
  percent = as.numeric(percent)
  data <- data.frame("category" = c('Agree', 'Disagree'), "amount" = c(percent, 100-percent))
  ggplot(data, aes(x="", y=amount, fill=category)) +
    geom_bar(stat="identity", width=1) +
    coord_polar("y") +
    labs(title = str_wrap(my_title, 45))
}

ggarrange(AgreeDisagreePie(73, "Being able to use the internet to access information and express opinions should be a human right"),
          AgreeDisagreePie(66, "The internet has improved life in my country"),
          AgreeDisagreePie(67, "Using the internet has helped me pursue my education or that of my household members"),
          ncol = 3, nrow = 1, labels = c("A", "B", "C"), common.legend = TRUE, legend = "bottom") 

ui <- fluidPage(

  # App title ----
  titlePanel("Shiny Text"),

  # Sidebar layout with a input and output definitions ----
  sidebarLayout(

    # Sidebar panel for inputs ----
    sidebarPanel(

      # Input: Selector for choosing dataset ----
      selectInput(inputId = "dataset",
                  label = "Choose a dataset:",
                  choices = c("SPEED: Mean download speed (Mbps)", "PRICE: Average price of 1GB (in USD)", "ACCESS: Individuals using the Internet (% of population)")),

      sliderInput(inputId = "year",
                  label = "Choose the year:",
                  min = 1990, max = 2022, value = 2020, sep = ""),
    ),

    # Main panel for displaying outputs ----
    mainPanel(

      # Output: Verbatim text for data summary ----
      verbatimTextOutput("summary"),

      # Output: HTML table with requested number of observations ----
      plotOutput("view")
    )
  )
)
server <- function(input, output, session) {

  # Return the requested dataset ----
  datasetInput <- reactive({
    switch(input$dataset,
           "ACCESS: Individuals using the Internet (% of population)" = access_dataset,
           "PRICE: Average price of 1GB (in USD)" = price_dataset, #2019-2023
           "SPEED: Mean download speed (Mbps)" = speed_dataset) #2017 to 2023
  })
  observe({
    if (identical(datasetInput(),access_dataset)) {
      minnie = 1990L
      maxxie = 2022L
    } else if (identical(datasetInput(),price_dataset)) {
      minnie = 2019L
      maxxie = 2023L
    } else if (identical(datasetInput(),speed_dataset)){
      minnie = 2017L
      maxxie = 2023L
    }
    updateSliderInput(
      session = session,
      inputId = "year",
      min = minnie,
      max = maxxie
    )
  })
  output$view <- renderPlot({
    mapplotting(datasetInput(), as.character(input$year), "B")
  })

}
shinyApp(ui, server)
```

\(1\) Hi! I'm Dawn, a year one communications and new media student. I like to bake but no one eats what I make.\
\
(2) github folder: <https://github.com/dawn-cheung/NM2207-Folder-Upload>
